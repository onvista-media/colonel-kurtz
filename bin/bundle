#!/usr/bin/env node

'use strict'

const rollup = require('rollup')
const resolve = require('rollup-plugin-node-resolve')
const commonjs = require('rollup-plugin-commonjs')
const babel = require('rollup-plugin-babel')
const path = require('path')

const options = {
  format: 'cjs',
  out: 'build'
}

const packages = [
  {
    entry: 'src/Colonel.js',
    output: 'colonel.js'
  },
  {
    entry: 'addons/common/field.js',
    output: 'addons/common/field.js'
  },
  {
    entry: 'addons/common/frame.js',
    output: 'addons/common/frame.js'
  },
  {
    entry: 'addons/common/embedded.js',
    output: 'addons/common/embedded.js'
  },
  {
    entry: 'addons/common/graphic.js',
    output: 'addons/common/graphic.js'
  },
  {
    entry: 'addons/dialog/index.js',
    output: 'addons/dialog.js'
  },
  {
    entry: 'addons/html-embed/index.js',
    output: 'addons/html-embed.js'
  },
  {
    entry: 'addons/image/index.js',
    output: 'addons/image.js'
  },
  {
    entry: 'addons/medium/index.js',
    output: 'addons/medium.js'
  },
  {
    entry: 'addons/section/index.js',
    output: 'addons/section.js'
  },
  {
    entry: 'addons/youtube/index.js',
    output: 'addons/youtube.js'
  }
]

async function build(config) {
  try {
    let bundle = await rollup.rollup({
      input: path.resolve(config.entry),
      plugins: [
        resolve(),
        babel({
          exclude: 'node_modules/**',
          presets: ['@babel/env', '@babel/preset-react']
        }),
        commonjs(),
      ],
      external: ['react', 'react-dom'],
      globals: {
        react: 'React'
      }
    })

    await bundle.write({
      file: path.resolve(options.out, config.output),
      format: options.format,
      sourcemap: true
    })
  } catch (error) {
    console.error(error.toString())
    process.exit(1)
  }
}

packages.forEach(build)
